------------------------------
indexes
-------------------------------
class Index(*expressions, fields=(), name=None, db_tablespace=None, opclasses=(), condition=None, include=None)

Index.opclasses ---> ???
Index.condition ----> it could be useful to restrict an index to target subset
Index.include -----> 
eg:
>>>Index(name="covering_index", fields=["headline"], include=["pub_date"])
it makes this in data base 
>>>CREATE INDEX "covering_index" ON public.cartable_dabir USING btree ("headline") INCLUDE (pub_date)

A list or tuple of the names of the fields to be included in the covering index as non-key columns. This allows index-only scans to be used for queries that select only included fields (include) and filter only by indexed fields (fields).









--------------------
query performance booster
--------------------
select_related---->

Hits the database with joins to the author and hometown tables.
>>>b = Book.objects.select_related("author__hometown").get(id=4)
>>>p = b.author  # Doesn't hit the database.
>>>c = p.hometown  # Doesn't hit the database.

Without select_related()...
>>>b = Book.objects.get(id=4)  # Hits the database.
>>>p = b.author  # Hits the database.
>>>c = p.hometown  # Hits the database.





.only() ---->
 It is often used to optimize queries by loading only the necessary fields and avoiding unnecessary data retrieval.
